///////////////////////////////////////////////////////////////////////////////
// Copyright Â© 2020 xx network SEZC                                          //
//                                                                           //
// Use of this source code is governed by a license that can be found in the //
// LICENSE file                                                              //
///////////////////////////////////////////////////////////////////////////////

package backup

import (
	"bytes"
	"crypto/rand"
	"encoding/hex"
	"reflect"
	"testing"

	"github.com/stretchr/testify/require"

	"gitlab.com/xx_network/crypto/csprng"
	"gitlab.com/xx_network/crypto/signature/rsa"
)

func TestTagVersion(t *testing.T) {
	blob := marshalTagVersion()
	err := checkMarshalledTagVersion(blob)
	require.NoError(t, err)
}

func TestMarshalSaltParams_UnmarshalSaltParams(t *testing.T) {
	salt, _ := MakeSalt(csprng.NewSystemRNG())
	p := DefaultParams()

	marshalledBytes := marshalSaltParams(salt, p)
	unmarshalledSalt, newP, err := unmarshalSaltParams(marshalledBytes)
	if err != nil {
		t.Errorf("unmarshalSaltParams returned an error: %+v", err)
	}

	if !bytes.Equal(salt, unmarshalledSalt) {
		t.Errorf("Unmarshalled salt does not match original."+
			"\nexpected: %v\nreceived: %v", salt, unmarshalledSalt)
	}

	if !reflect.DeepEqual(p, newP) {
		t.Errorf("Unmarshalled Params does not match original."+
			"\nexpected: %+v\nreceived: %+v", p, newP)
	}
}

func TestEncrypt(t *testing.T) {
	rsaPrivKey, err := rsa.GenerateKey(csprng.NewSystemRNG(), 4096)
	require.NoError(t, err)

	backup := &Backup{
		TransmissionIdentity: TransmissionIdentity{
			RSASigningPrivateKey: rsaPrivKey,
		},
	}

	key := make([]byte, 32)
	_, err = rand.Read(key)
	require.NoError(t, err)

	salt := make([]byte, 32)
	_, err = rand.Read(salt)
	require.NoError(t, err)

	_, err = backup.Encrypt(csprng.NewSystemRNG(), key, salt, testParams())
	require.NoError(t, err)
}

func TestDecrypt(t *testing.T) {

	rsaPrivKey, err := rsa.GenerateKey(csprng.NewSystemRNG(), 4096)
	require.NoError(t, err)

	backup := &Backup{
		TransmissionIdentity: TransmissionIdentity{
			RSASigningPrivateKey: rsaPrivKey,
		},
	}

	password := make([]byte, 18)
	_, err = rand.Read(password)
	require.NoError(t, err)

	salt, err := MakeSalt(csprng.NewSystemRNG())
	require.NoError(t, err)

	key := DeriveKey(string(password), salt, testParams())

	ciphertext, err := backup.Encrypt(
		csprng.NewSystemRNG(), key, salt, testParams())
	require.NoError(t, err)

	newbackup := &Backup{}
	err = newbackup.Decrypt(string(password), ciphertext)
	require.NoError(t, err)

	require.Equal(t, newbackup.TransmissionIdentity.RSASigningPrivateKey, backup.TransmissionIdentity.RSASigningPrivateKey)
}

func TestDecryptPrecanned(t *testing.T) {

	keyStr := "d1899ccc9de7a8dc42594fffd9df7edd65b8"
	ciphertextStr := ""

	key, err := hex.DecodeString(keyStr)
	require.NoError(t, err)
	ciphertext, err := hex.DecodeString(ciphertextStr)
	require.NoError(t, err)

	backup := &Backup{}
	err = backup.Decrypt(string(key), ciphertext)
	require.NoError(t, err)
}
