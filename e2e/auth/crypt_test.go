package auth

import (
	"math/rand"
	"reflect"
	"testing"
)

// Tests that running Crypt twice encrypts and then decrypts the message
func TestCryptCrypt(t *testing.T) {
	// Create key and message
	key := []byte{82, 253, 252, 7, 33, 130, 101, 79, 22, 63, 95, 15, 154, 98, 29, 114, 149, 102, 199, 77, 16, 3, 124,
		77, 123, 187, 4, 7, 209, 226, 198, 73}
	vector := []byte{82, 253, 252, 7, 33, 130, 101, 79, 22, 63, 95, 15, 154, 98, 29, 114, 149, 102, 199, 77, 16, 3, 124,
		77}
	msg := []byte{5, 12, 11}

	// Encrypt key
	encMsg := Crypt(key, vector, msg)

	// Decrypt key
	dncMsg := Crypt(key, vector, encMsg)

	if !reflect.DeepEqual(dncMsg, msg) {
		t.Errorf("Encrypt() did not encrypt the message correctly\n\treceived: %v\n\texpected: %v", dncMsg, msg)
	}
}

func TestCrypt_Panic(t *testing.T) {
	defer func() {
		if r := recover(); r == nil {
			t.Errorf("Crypt should panic on when the vector has less than (%d)!", NonceLength)
		}
	}()
	// Create key and message
	key := []byte{82, 253, 252, 7, 33, 130, 101, 79, 22, 63, 95, 15, 154, 98, 29, 114, 149, 102, 199, 77, 16, 3, 124,
		77, 123, 187, 4, 7, 209, 226, 198, 73}
	msg := []byte{5, 12, 11}

	// Pass in a vector of insufficient length for encrypting
	vector := []byte("badLength")

	// Encrypt key, should cause a panic
	Crypt(key, vector, msg)

}

// Ensures that encrypted messages are consistency encrypted to the same value
// (when replacing the random number generater with a pseudo one)
func TestEncrypt_Consistency(t *testing.T) {
	const messageSize = 100
	// Set up expected values with base64 encoding
	expectedMsgs := [][]byte{
		{0xfa, 0xb, 0x9e, 0x56, 0x87, 0x28, 0x9, 0x3c, 0xe3, 0xc1, 0xe, 0x31, 0xda, 0x46, 0x7, 0x47, 0xea, 0x2d, 0x2a, 0x9a, 0x27, 0xd1, 0x3e, 0xcd, 0x22, 0xf5, 0x20, 0xac, 0x2e, 0x16, 0x4c, 0x1d, 0xf8, 0xb1, 0x52, 0x6f, 0xda, 0x6b, 0x3, 0xf9, 0xfb, 0x29, 0xe7, 0x4f, 0x73, 0x55, 0x9c, 0x42, 0x93, 0xd4, 0x78, 0x97, 0xc1, 0xd6, 0xc5, 0x26, 0xf1, 0x41, 0x7c, 0xbb, 0xc6, 0xfc, 0xcd, 0x8e, 0x9e, 0x1c, 0xd5, 0x4d, 0x46, 0xfe, 0x9d, 0x9, 0xf7, 0x1c, 0xc8, 0x55, 0x33, 0xf1, 0x75, 0xa6, 0x28, 0xe4, 0xd2, 0x3, 0x4b, 0xb9, 0x1d, 0xe1, 0xba, 0xd3, 0x48, 0x31, 0x56, 0xbf, 0x71, 0xa1, 0x98, 0x6, 0x9e, 0xd4},
		{0xff, 0x16, 0xb7, 0x2a, 0xb, 0x78, 0x6b, 0x29, 0x2a, 0x13, 0x3a, 0xe2, 0x88, 0x49, 0xf1, 0xf4, 0xf5, 0x24, 0xc9, 0xea, 0x61, 0x8b, 0x40, 0x25, 0x5a, 0x17, 0x91, 0xbb, 0x9f, 0xb5, 0x5f, 0xff, 0x24, 0x5d, 0x4d, 0xd5, 0x6c, 0x84, 0x54, 0x7d, 0xb0, 0xbc, 0x54, 0x4, 0xfc, 0xfe, 0x5e, 0xae, 0x7f, 0x18, 0xc4, 0x82, 0x69, 0xa8, 0x78, 0x3e, 0x14, 0x6b, 0xa2, 0xd5, 0xac, 0x61, 0xb1, 0x9d, 0x68, 0xfa, 0x5d, 0x78, 0x20, 0xb6, 0x7c, 0x14, 0x65, 0x73, 0x6b, 0xaf, 0xea, 0xb8, 0x4d, 0xd1, 0x6, 0xf9, 0x1d, 0xf9, 0xe6, 0x65, 0xb6, 0x41, 0xe, 0x98, 0x22, 0x38, 0x1d, 0x77, 0xcd, 0xd7, 0x9c, 0xc9, 0xb8, 0x51},
		{0x2d, 0x30, 0xc4, 0x41, 0xd7, 0xb8, 0x21, 0x2, 0x9e, 0xe2, 0xee, 0x71, 0x81, 0x88, 0xbd, 0x55, 0x9c, 0x11, 0xc7, 0x47, 0x1, 0x4, 0x5a, 0x1a, 0xab, 0x13, 0xa4, 0x4b, 0xb8, 0xc1, 0x89, 0xde, 0x73, 0x6f, 0x9f, 0xae, 0x7b, 0xd7, 0xb, 0xc2, 0x74, 0x6c, 0xc3, 0x28, 0x2c, 0xeb, 0xa9, 0x58, 0x3a, 0x22, 0x41, 0xf7, 0xd4, 0x66, 0xf2, 0x90, 0x86, 0x15, 0xb2, 0x6, 0xa1, 0xc7, 0x90, 0x27, 0xb3, 0x1b, 0x6d, 0x85, 0x5a, 0xd6, 0x92, 0x74, 0x66, 0x56, 0x1, 0x68, 0x69, 0xd6, 0xc5, 0x3, 0xc7, 0x47, 0xa3, 0x4, 0x2f, 0x8, 0x22, 0xc0, 0x62, 0xbe, 0x2f, 0x88, 0xdd, 0x56, 0xc3, 0x8f, 0xb9, 0x4a, 0xb8, 0x3e},
		{0x66, 0xef, 0xc, 0x37, 0x6f, 0x57, 0x79, 0x88, 0x66, 0x5b, 0x39, 0x7e, 0xa4, 0xa4, 0xc0, 0x30, 0x9c, 0x81, 0x8, 0x8a, 0xa8, 0x84, 0x6d, 0x74, 0x32, 0x5f, 0x87, 0xd4, 0xb0, 0x7, 0x27, 0x61, 0x9f, 0x91, 0x7f, 0x12, 0x4d, 0x3b, 0x85, 0xda, 0xc0, 0xbb, 0xd4, 0x26, 0xec, 0x75, 0x63, 0xc2, 0x63, 0xa0, 0xf9, 0x6c, 0xff, 0xb3, 0xed, 0xe4, 0x91, 0xcd, 0xbb, 0x5e, 0x32, 0x25, 0x69, 0x24, 0xd3, 0xaa, 0xa3, 0x2a, 0x3, 0x67, 0x35, 0xf2, 0xa3, 0xd6, 0x18, 0x37, 0xce, 0xce, 0xd0, 0x78, 0x60, 0x68, 0x16, 0x12, 0x4b, 0xa0, 0x0, 0x3c, 0x60, 0x7e, 0x4, 0xac, 0xac, 0x14, 0xce, 0xdc, 0x21, 0x3d, 0xfd, 0x6d},
	}

	// Generate keys, fingerprints and messages
	var keys [4][]byte
	var vectors [4][]byte
	var msgs [][]byte
	keyPrng := rand.New(rand.NewSource(42))
	vectorPrng := rand.New(rand.NewSource(420))
	msgPrng := rand.New(rand.NewSource(69))
	for i := 0; i < len(expectedMsgs); i++ {
		key := make([]byte, 32)
		keyPrng.Read(key)
		keys[i] = key

		vector := make([]byte, 24)
		vectorPrng.Read(vector)
		vectors[i] = vector

		msgBytes := make([]byte, messageSize)
		msgPrng.Read(msgBytes)
		msgs = append(msgs, msgBytes)
	}

	//encrypt messages with fingerprints and check they match the expected
	for i := 0; i < len(msgs); i++ {
		encMsg := Crypt(keys[i], vectors[i], msgs[i])

		// Decode base64 encoded expected message
		expectedMsg := expectedMsgs[i]
		if !reflect.DeepEqual(encMsg, expectedMsg) {
			t.Errorf("EncryptUnsafe() did not produce the correct message on test %v\n\treceived: %#v\n\texpected: %#v", i, encMsg, expectedMsg)
			//fmt.Println(base64.StdEncoding.EncodeToString(encMsg))
		}
	}
}
