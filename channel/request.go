package channel

import (
	"encoding/binary"
	"gitlab.com/elixxir/crypto/hash"
	"gitlab.com/xx_network/crypto/signature/rsa"
	"io"
)

// hashRequestInfo is a helper which handles hashing info for channel requests
func hashRequestInfo(userEdPub []byte, ts int64) []byte {
	tsBytes := make([]byte, 8)
	binary.BigEndian.PutUint64(tsBytes, uint64(ts))
	h := hash.CMixHash.New()
	h.Write(userEdPub)
	h.Write(tsBytes)
	return h.Sum(nil)
}

// SignRequest accepts a User's ED public key & a timestamp and signs them using the given private key
func SignRequest(userEdPub []byte, ts int64, userRsaPriv *rsa.PrivateKey, rng io.Reader) ([]byte, error) {
	hashed := hashRequestInfo(userEdPub, ts)
	return rsa.Sign(rng, userRsaPriv, hash.CMixHash, hashed, rsa.NewDefaultOptions())
}

// VerifyRequest verifies a user's request generated by SignRequest, accepting the same information and a corresponding public key
func VerifyRequest(sig, userEdPub []byte, ts int64, userRsaPub *rsa.PublicKey) error {
	hashed := hashRequestInfo(userEdPub, ts)
	return rsa.Verify(userRsaPub, hash.CMixHash, hashed, sig, rsa.NewDefaultOptions())
}
