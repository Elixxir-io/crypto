package channel

import (
	"crypto"
	"crypto/ed25519"
	"encoding/binary"
	"io"

	"gitlab.com/xx_network/crypto/signature/rsa"
)

// hashRequestInfo is a helper which handles hashing info for channel requests
func hashRequestInfo(username string, userEdPub ed25519.PublicKey, ts int64) []byte {
	tsBytes := make([]byte, 8)
	binary.PutVarint(tsBytes, ts)
	h := crypto.BLAKE2b_256.New()
	h.Write([]byte(userEdPub))
	h.Write(tsBytes)
	h.Write([]byte(username))
	return h.Sum(nil)
}

// SignChannelIdentityRequest accepts a User's ED public key & a timestamp and signs them using the given private key.
// It is used by clients to sign their ED public key for verification when requesting a channel identity from User Discovery.
func SignChannelIdentityRequest(username string, userEdPub ed25519.PublicKey, ts int64, userRsaPriv *rsa.PrivateKey, rng io.Reader) ([]byte, error) {
	hashed := hashRequestInfo(username, userEdPub, ts)
	return rsa.Sign(rng, userRsaPriv, crypto.BLAKE2b_256, hashed, rsa.NewDefaultOptions())
}

// VerifyChannelIdentityRequest verifies a user's request generated by SignChannelIdentityRequest,
// accepting the same information and a corresponding public key.
// It is used by User Discovery to verify the authenticity of channel identity requests from users.
func VerifyChannelIdentityRequest(username string, sig, userEdPub ed25519.PublicKey, ts int64, userRsaPub *rsa.PublicKey) error {
	hashed := hashRequestInfo(username, userEdPub, ts)
	return rsa.Verify(userRsaPub, crypto.BLAKE2b_256, hashed, sig, rsa.NewDefaultOptions())
}
