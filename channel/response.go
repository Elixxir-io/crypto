package channel

import (
	"crypto"
	"crypto/ed25519"
	"encoding/binary"
	"time"
)

// hashRequestInfo is a helper to handles hashing channel lease response info
func hashResponseInfo(username string, userPublicKey ed25519.PublicKey,
	lease time.Time) []byte {
	leaseBytes := make([]byte, 8)
	binary.PutVarint(leaseBytes, lease.UnixNano())
	h := crypto.BLAKE2b_256.New()
	h.Write(leaseBytes)
	h.Write(userPublicKey)
	h.Write([]byte(username))
	return h.Sum(nil)
}

// SignChannelLease accepts a user's ed25519 pub key, username & a given lease
// and signs them with an ed25519 private key.  It is used by User Discovery
// to prove that users' channel identities are valid, and are the same values
// passed to user discovery.
func SignChannelLease(userPublicKey ed25519.PublicKey, username string,
	lease time.Time, pk ed25519.PrivateKey) []byte {
	hashed := hashResponseInfo(username, userPublicKey, lease)
	return ed25519.Sign(pk, hashed)
}

// VerifyChannelLease verifies a signature generated by SignChannelLease,
// accepting the same info and a corresponding ed25519 public key.
// It is meant to be used in channel logic to authenticate channel identities.
// It proves that a user with a given username is authorized by user discovery
// to use this username until lease time using the given public key.
func VerifyChannelLease(sig, userPublicKey ed25519.PublicKey, username string,
	lease time.Time, pub ed25519.PublicKey) bool {
	hashed := hashResponseInfo(username, userPublicKey, lease)
	return ed25519.Verify(pub, hashed, sig)
}
