package channel

import (
	"crypto"
	"crypto/ed25519"
	"encoding/binary"
)

// hashRequestInfo is a helper which handles hashing info for a channel lease response
func hashResponseInfo(userEdPub []byte, lease uint64) []byte {
	leaseBytes := make([]byte, 8)
	binary.BigEndian.PutUint64(leaseBytes, lease)
	h := crypto.BLAKE2b_256.New()
	h.Write(leaseBytes)
	h.Write(userEdPub)
	return h.Sum(nil)
}

// SignChannelLease accepts a user's ed25519 pub key & a given lease and signs them with an ed25519 private key.
// It is used by User Discovery to prove that users' channel identities are valid.
func SignChannelLease(userEdPub []byte, lease uint64, pk ed25519.PrivateKey) []byte {
	hashed := hashResponseInfo(userEdPub, lease)
	return ed25519.Sign(pk, hashed)
}

// VerifyChannelLease verifies a signature generated by SignChannelLease, accepting the same info and a corresponding ed25519 public key.
// It is meant to be used in channel logic to authenticate channel identities.
func VerifyChannelLease(sig, userEdPub []byte, lease uint64, pub ed25519.PublicKey) bool {
	hashed := hashResponseInfo(userEdPub, lease)
	return ed25519.Verify(pub, hashed, sig)
}
