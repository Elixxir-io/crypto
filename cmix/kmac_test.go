/* Copyright 2020 xx network SEZC

   Redistribution and use in source and binary forms, with or without
   modification, are permitted provided that the following conditions are met:

   1. Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

   2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   POSSIBILITY OF SUCH DAMAGE.

*/

package cmix

import (
	"gitlab.com/elixxir/crypto/cyclic"
	"gitlab.com/elixxir/crypto/hash"
	"gitlab.com/xx_network/crypto/csprng"
	"gitlab.com/xx_network/crypto/large"
	"math/rand"
	"reflect"
	"testing"
)

//Tests that the kmac function outputs wha
func TestGenerateKMAC_Consistency(t *testing.T) {

	grp := grpTest()

	rng := rand.New(rand.NewSource(42))

	h, err := hash.NewCMixHash()

	if err != nil {
		t.Errorf("Could not get cmixHash: %+v", h)
	}

	for i := 0; i < 100; i++ {

		baseKeyBytes, err := csprng.GenerateInGroup(grp.GetPBytes(), grp.GetP().ByteLen(), rng)
		if err != nil {
			t.Errorf("could not generate base base keys")
		}
		baseKey := grp.NewIntFromBytes(baseKeyBytes)

		salt := make([]byte, 32)
		_, err = rng.Read(salt)
		if err != nil {
			t.Errorf("could not generate salt")
		}

		kmac := GenerateKMAC(salt, baseKey, h)

		if !reflect.DeepEqual(kmac, precannedKMAC[i]) {
			t.Errorf("KMAC %v did not match expected:"+
				"\n  Received: %v\n  Expected: %v", i, kmac, precannedKMAC[i])
		}
	}
}

//Tests that the kmac function outputs wha
func TestGenerateKMACs_Consistency(t *testing.T) {

	grp := grpTest()

	rng := rand.New(rand.NewSource(42))

	h, err := hash.NewCMixHash()

	if err != nil {
		t.Errorf("Could not get cmixHash: %+v", h)
	}

	numbaseKeys := 3

	for i := 0; i < 10; i++ {

		var baseKeys []*cyclic.Int

		for i := 0; i < numbaseKeys; i++ {
			baseKeyBytes, err := csprng.GenerateInGroup(grp.GetPBytes(), grp.GetP().ByteLen(), rng)
			if err != nil {
				t.Errorf("could not generate base base keys")
			}
			baseKey := grp.NewIntFromBytes(baseKeyBytes)
			baseKeys = append(baseKeys, baseKey)
		}

		salt := make([]byte, 32)
		_, err = rng.Read(salt)
		if err != nil {
			t.Errorf("could not generate salt")
		}

		kmacs := GenerateKMACs(salt, baseKeys, h)

		if !reflect.DeepEqual(kmacs, precannedKMACs[i]) {
			t.Errorf("KMAC %v did not match expected:"+
				"\n  Received: %v\n  Expected: %v", i, kmacs, precannedKMACs[i])
		}
	}
}

//Happy path
func TestVerifyKMAC(t *testing.T) {
	grp := grpTest()

	rng := rand.New(rand.NewSource(42))

	h, err := hash.NewCMixHash()

	if err != nil {
		t.Errorf("Could not get cmixHash: %+v", h)
	}

	for i := 0; i < 100; i++ {

		baseKeyBytes, err := csprng.GenerateInGroup(grp.GetPBytes(), grp.GetP().ByteLen(), rng)
		if err != nil {
			t.Errorf("could not generate base base keys")
		}
		baseKey := grp.NewIntFromBytes(baseKeyBytes)

		salt := make([]byte, 32)
		_, err = rng.Read(salt)
		if err != nil {
			t.Errorf("could not generate salt")
		}

		kmac := GenerateKMAC(salt, baseKey, h)

		if !VerifyKMAC(kmac, salt, baseKey, h) {
			t.Errorf("KMAC %v could not be verified", i)
		}
	}
}

//Error path
func TestVerifyKMAC_WrongExpectedKmac(t *testing.T) {

	grp := grpTest()

	rng := rand.New(rand.NewSource(42))

	h, err := hash.NewCMixHash()

	if err != nil {
		t.Errorf("Could not get cmixHash: %+v", h)
	}

	baseKeyBytes, err := csprng.GenerateInGroup(grp.GetPBytes(), grp.GetP().ByteLen(), rng)
	if err != nil {
		t.Errorf("could not generate base base keys")
	}
	baseKey := grp.NewIntFromBytes(baseKeyBytes)

	salt := make([]byte, 32)
	_, err = rng.Read(salt)
	if err != nil {
		t.Errorf("could not generate salt")
	}

	//Pass in a 'bad' kmac (ie one that would not be generated by the salt/basekey/hash)
	if !VerifyKMAC(make([]byte, 2), salt, baseKey, h) {
		return
	}
	t.Errorf("KMAC should not have been verified")

}

//Error path
func TestVerifyKACY_Mismatch(t *testing.T) {
	grp := grpTest()

	rng := rand.New(rand.NewSource(42))

	h, err := hash.NewCMixHash()

	if err != nil {
		t.Errorf("Could not get cmixHash: %+v", h)
	}

	for i := 0; i < 100; i++ {

		baseKeyBytes, err := csprng.GenerateInGroup(grp.GetPBytes(), grp.GetP().ByteLen(), rng)
		if err != nil {
			t.Errorf("could not generate base base keys")
		}
		baseKey := grp.NewIntFromBytes(baseKeyBytes)

		salt := make([]byte, 32)
		_, err = rng.Read(salt)
		if err != nil {
			t.Errorf("could not generate salt")
		}

		kmac := make([]byte, 32)
		rng.Read(kmac)

		if VerifyKMAC(kmac, salt, baseKey, h) {
			t.Errorf("KMAC %v verified when it shouldnt", i)
		}
	}
}

var precannedKMAC = [][]byte{
	{180, 132, 224, 196, 194, 7, 11, 168, 127, 154, 11, 137, 129, 0, 1, 49, 88, 67, 233, 76, 32, 162, 3, 79, 10, 45, 90, 127, 83, 251, 191, 68},
	{38, 223, 160, 142, 255, 82, 13, 221, 250, 44, 180, 215, 127, 109, 21, 142, 125, 236, 83, 234, 155, 4, 168, 139, 187, 78, 138, 1, 215, 236, 207, 79},
	{127, 178, 119, 253, 89, 73, 86, 81, 226, 150, 209, 255, 236, 134, 35, 147, 199, 113, 149, 75, 98, 163, 49, 173, 192, 2, 8, 187, 189, 8, 114, 108},
	{93, 238, 56, 181, 149, 65, 153, 10, 161, 144, 195, 191, 20, 13, 248, 39, 133, 226, 86, 3, 206, 15, 196, 138, 208, 106, 78, 151, 80, 68, 135, 157},
	{167, 146, 61, 246, 3, 70, 62, 117, 12, 188, 110, 253, 242, 137, 6, 44, 217, 245, 252, 251, 211, 159, 213, 180, 170, 230, 65, 82, 201, 254, 205, 70},
	{146, 108, 148, 62, 151, 39, 24, 26, 138, 63, 116, 200, 157, 244, 179, 59, 36, 25, 43, 245, 62, 94, 151, 53, 51, 96, 16, 125, 203, 215, 84, 109},
	{22, 124, 71, 233, 160, 143, 226, 129, 218, 189, 49, 54, 50, 32, 239, 110, 246, 172, 196, 52, 117, 142, 174, 149, 141, 194, 0, 215, 11, 36, 104, 112},
	{229, 59, 57, 200, 180, 39, 70, 61, 101, 96, 108, 119, 56, 4, 60, 185, 40, 4, 36, 8, 16, 14, 170, 227, 48, 203, 52, 37, 59, 22, 240, 101},
	{163, 71, 150, 238, 146, 13, 182, 228, 57, 120, 210, 178, 119, 179, 252, 230, 57, 101, 198, 68, 47, 211, 241, 205, 233, 77, 46, 83, 217, 11, 240, 203},
	{47, 178, 119, 187, 219, 30, 242, 142, 12, 185, 77, 129, 20, 41, 119, 219, 84, 181, 88, 108, 110, 178, 232, 43, 9, 238, 194, 161, 123, 181, 218, 123},
	{68, 121, 98, 249, 5, 105, 66, 63, 91, 211, 128, 10, 198, 64, 220, 102, 62, 250, 138, 92, 115, 203, 190, 247, 119, 253, 113, 77, 131, 104, 140, 86},
	{196, 169, 97, 92, 26, 196, 116, 177, 52, 205, 30, 125, 207, 181, 44, 80, 223, 249, 22, 59, 4, 253, 96, 137, 185, 86, 4, 16, 28, 32, 106, 2},
	{0, 245, 143, 196, 128, 188, 98, 131, 23, 17, 82, 225, 26, 166, 86, 89, 125, 41, 7, 240, 29, 113, 76, 208, 41, 189, 238, 127, 235, 252, 143, 107},
	{210, 39, 165, 78, 50, 196, 244, 110, 10, 130, 124, 1, 218, 127, 244, 53, 238, 73, 119, 16, 82, 165, 243, 101, 68, 70, 199, 179, 47, 220, 25, 48},
	{100, 251, 214, 130, 6, 208, 87, 148, 92, 14, 161, 233, 123, 127, 125, 180, 137, 97, 40, 58, 93, 61, 230, 74, 88, 209, 27, 207, 82, 14, 155, 133},
	{178, 75, 129, 255, 12, 126, 243, 36, 183, 113, 83, 36, 87, 97, 158, 242, 175, 99, 116, 104, 198, 182, 110, 69, 114, 18, 109, 45, 207, 215, 189, 173},
	{87, 73, 158, 20, 34, 107, 64, 88, 60, 20, 188, 55, 85, 37, 253, 15, 202, 29, 136, 36, 58, 37, 202, 205, 30, 200, 107, 83, 27, 201, 130, 238},
	{171, 197, 126, 162, 84, 172, 227, 165, 67, 58, 55, 56, 164, 29, 66, 119, 147, 176, 83, 77, 174, 107, 118, 231, 216, 176, 30, 12, 33, 200, 171, 58},
	{150, 150, 7, 160, 245, 145, 166, 52, 150, 229, 167, 223, 25, 225, 23, 223, 181, 242, 233, 146, 101, 92, 189, 73, 191, 13, 136, 233, 85, 26, 117, 105},
	{126, 151, 130, 72, 15, 99, 215, 116, 191, 45, 80, 27, 193, 184, 27, 117, 48, 142, 166, 187, 225, 73, 170, 172, 14, 30, 2, 248, 198, 169, 136, 218},
	{58, 70, 116, 136, 71, 86, 97, 210, 72, 31, 14, 128, 155, 7, 30, 233, 203, 26, 133, 68, 218, 99, 227, 76, 236, 91, 226, 95, 209, 128, 42, 25},
	{201, 147, 98, 169, 97, 130, 25, 189, 192, 236, 135, 231, 18, 104, 70, 132, 165, 221, 174, 198, 214, 41, 128, 162, 52, 111, 139, 253, 49, 60, 214, 156},
	{187, 54, 91, 120, 99, 94, 249, 8, 217, 221, 36, 87, 99, 229, 98, 187, 18, 232, 137, 209, 8, 231, 173, 2, 3, 106, 197, 205, 107, 208, 117, 193},
	{164, 86, 172, 220, 181, 186, 212, 214, 80, 204, 206, 246, 47, 197, 58, 228, 100, 16, 254, 219, 159, 61, 225, 207, 41, 5, 199, 224, 228, 173, 8, 42},
	{75, 114, 247, 136, 224, 117, 113, 117, 104, 84, 120, 63, 235, 54, 122, 19, 162, 93, 24, 163, 179, 205, 225, 73, 180, 161, 141, 195, 33, 40, 84, 82},
	{77, 109, 237, 115, 218, 48, 172, 130, 194, 237, 25, 181, 195, 93, 45, 0, 139, 107, 59, 157, 118, 58, 231, 172, 68, 222, 170, 177, 39, 211, 74, 119},
	{225, 31, 148, 211, 52, 48, 156, 85, 194, 181, 213, 16, 187, 50, 26, 148, 80, 2, 137, 20, 14, 53, 125, 57, 35, 184, 46, 166, 251, 29, 149, 21},
	{83, 12, 58, 208, 20, 249, 233, 3, 184, 239, 204, 229, 196, 60, 241, 15, 61, 19, 127, 139, 110, 78, 87, 209, 49, 46, 221, 33, 10, 70, 168, 164},
	{24, 234, 11, 67, 218, 152, 245, 37, 194, 83, 246, 125, 125, 100, 158, 109, 221, 231, 41, 45, 154, 74, 232, 15, 111, 151, 16, 225, 196, 92, 8, 207},
	{8, 211, 61, 73, 170, 45, 228, 12, 140, 209, 147, 99, 169, 57, 83, 52, 108, 234, 106, 228, 169, 211, 245, 30, 231, 144, 80, 171, 216, 158, 124, 88},
	{252, 34, 217, 24, 189, 43, 248, 65, 170, 104, 160, 117, 198, 68, 148, 63, 133, 30, 24, 39, 237, 114, 133, 33, 197, 43, 24, 89, 132, 67, 249, 114},
	{88, 100, 112, 237, 249, 106, 13, 3, 110, 220, 162, 237, 12, 229, 79, 244, 245, 112, 176, 201, 22, 11, 36, 73, 44, 9, 148, 188, 96, 28, 225, 93},
	{98, 106, 58, 193, 206, 48, 78, 21, 183, 167, 57, 127, 21, 248, 80, 77, 86, 104, 151, 254, 84, 42, 57, 214, 136, 183, 144, 80, 36, 178, 112, 164},
	{41, 53, 91, 17, 17, 222, 10, 219, 206, 22, 26, 118, 229, 186, 68, 247, 2, 149, 66, 253, 54, 204, 97, 85, 70, 236, 183, 245, 100, 72, 84, 41},
	{164, 43, 94, 78, 207, 6, 110, 118, 245, 248, 130, 140, 204, 228, 213, 232, 33, 82, 205, 204, 26, 81, 253, 244, 92, 240, 66, 132, 9, 74, 0, 224},
	{119, 77, 147, 52, 114, 128, 61, 251, 141, 124, 14, 113, 15, 164, 200, 16, 5, 100, 113, 108, 34, 9, 67, 22, 110, 20, 131, 174, 132, 255, 57, 184},
	{215, 198, 22, 89, 160, 227, 90, 10, 0, 128, 242, 216, 177, 16, 185, 195, 29, 135, 74, 160, 44, 93, 49, 253, 239, 60, 51, 237, 92, 26, 117, 125},
	{90, 208, 48, 22, 125, 155, 247, 91, 13, 203, 125, 45, 243, 92, 128, 7, 105, 152, 77, 96, 202, 204, 193, 156, 70, 222, 145, 221, 170, 49, 63, 70},
	{235, 44, 16, 189, 162, 25, 172, 187, 135, 5, 66, 59, 250, 254, 113, 218, 4, 229, 162, 53, 70, 149, 212, 76, 68, 123, 109, 179, 71, 142, 209, 209},
	{117, 197, 64, 245, 230, 72, 80, 193, 167, 248, 63, 165, 146, 23, 181, 59, 38, 37, 13, 219, 81, 151, 40, 98, 16, 83, 107, 119, 230, 109, 12, 202},
	{64, 80, 127, 22, 168, 6, 246, 173, 134, 186, 188, 229, 10, 212, 59, 67, 198, 42, 37, 92, 65, 159, 59, 157, 122, 62, 240, 108, 179, 127, 92, 65},
	{105, 193, 28, 1, 48, 18, 159, 80, 170, 13, 213, 0, 29, 44, 83, 42, 25, 158, 145, 19, 183, 73, 151, 175, 94, 98, 163, 28, 112, 239, 16, 224},
	{193, 11, 134, 183, 101, 21, 150, 231, 242, 222, 33, 225, 137, 41, 27, 253, 41, 0, 154, 194, 87, 135, 201, 66, 222, 43, 177, 178, 227, 137, 18, 231},
	{232, 251, 191, 189, 28, 252, 57, 71, 56, 114, 11, 87, 86, 158, 66, 131, 174, 211, 171, 98, 7, 223, 201, 32, 4, 101, 44, 111, 231, 28, 249, 225},
	{112, 182, 180, 219, 229, 181, 75, 230, 0, 204, 61, 96, 252, 28, 44, 250, 139, 216, 184, 186, 38, 94, 169, 184, 205, 230, 6, 196, 184, 92, 228, 218},
	{207, 37, 112, 48, 151, 248, 226, 126, 195, 98, 148, 32, 67, 58, 150, 215, 179, 110, 164, 146, 120, 242, 68, 179, 40, 166, 203, 7, 249, 139, 44, 73},
	{13, 76, 59, 164, 80, 160, 19, 76, 245, 18, 228, 216, 124, 205, 48, 143, 225, 22, 41, 10, 236, 146, 6, 132, 87, 119, 94, 186, 10, 107, 163, 225},
	{12, 137, 118, 184, 37, 94, 244, 196, 96, 145, 222, 76, 252, 244, 63, 43, 123, 122, 81, 143, 51, 97, 220, 76, 204, 163, 42, 216, 187, 87, 85, 14},
	{9, 249, 67, 49, 112, 235, 244, 103, 82, 22, 124, 47, 99, 245, 94, 231, 246, 47, 42, 96, 154, 76, 92, 148, 20, 164, 66, 235, 221, 124, 245, 182},
	{186, 192, 218, 139, 76, 195, 107, 177, 96, 19, 63, 81, 78, 56, 79, 210, 58, 99, 64, 124, 127, 130, 55, 236, 130, 46, 162, 234, 176, 167, 102, 221},
	{36, 37, 37, 219, 142, 196, 254, 130, 65, 26, 189, 225, 72, 251, 36, 149, 151, 109, 197, 25, 163, 74, 118, 142, 13, 76, 164, 85, 83, 200, 76, 202},
	{0, 214, 137, 12, 172, 48, 155, 51, 211, 62, 244, 89, 218, 22, 39, 1, 198, 138, 207, 224, 206, 240, 137, 22, 19, 144, 255, 213, 253, 124, 147, 53},
	{222, 93, 128, 150, 37, 147, 33, 178, 245, 210, 45, 61, 92, 172, 160, 198, 245, 179, 74, 248, 106, 219, 183, 125, 216, 145, 86, 29, 77, 147, 86, 125},
	{247, 133, 233, 41, 131, 33, 29, 117, 74, 110, 200, 172, 156, 33, 248, 72, 170, 47, 55, 227, 115, 24, 212, 131, 69, 144, 217, 41, 90, 85, 101, 99},
	{166, 130, 64, 4, 104, 203, 223, 7, 115, 195, 101, 24, 42, 2, 220, 45, 190, 77, 174, 34, 37, 4, 35, 103, 164, 195, 253, 111, 34, 79, 126, 29},
	{180, 102, 138, 112, 253, 174, 101, 35, 40, 44, 178, 131, 128, 201, 94, 46, 123, 119, 116, 243, 148, 117, 132, 70, 207, 116, 176, 132, 105, 97, 65, 243},
	{100, 49, 164, 184, 43, 200, 45, 235, 44, 229, 1, 0, 58, 208, 228, 29, 147, 85, 42, 189, 8, 61, 185, 175, 56, 28, 107, 189, 49, 198, 253, 50},
	{208, 154, 49, 180, 102, 20, 52, 12, 6, 76, 254, 29, 223, 136, 218, 122, 133, 74, 164, 107, 46, 225, 87, 125, 205, 14, 169, 219, 85, 25, 202, 156},
	{193, 158, 117, 183, 213, 132, 99, 167, 104, 107, 133, 104, 20, 169, 214, 185, 203, 249, 174, 244, 192, 106, 106, 194, 140, 209, 6, 10, 81, 71, 77, 91},
	{131, 143, 177, 30, 34, 82, 61, 215, 152, 175, 198, 190, 14, 52, 98, 137, 162, 34, 143, 102, 89, 241, 247, 254, 117, 109, 204, 2, 193, 52, 161, 49},
	{219, 18, 32, 236, 122, 253, 181, 68, 170, 123, 79, 252, 244, 210, 204, 179, 41, 238, 6, 132, 25, 46, 113, 154, 96, 44, 136, 252, 23, 44, 176, 61},
	{88, 244, 69, 54, 153, 145, 202, 153, 191, 228, 166, 38, 240, 125, 53, 186, 181, 192, 11, 18, 221, 80, 166, 51, 5, 64, 26, 61, 92, 3, 185, 196},
	{91, 50, 222, 119, 204, 149, 217, 241, 196, 203, 1, 75, 232, 250, 5, 174, 92, 111, 246, 110, 115, 41, 140, 50, 93, 117, 189, 40, 109, 231, 172, 16},
	{48, 200, 77, 197, 165, 22, 35, 122, 58, 252, 254, 60, 67, 168, 99, 125, 150, 231, 139, 28, 201, 214, 224, 11, 11, 237, 58, 176, 115, 103, 221, 227},
	{167, 156, 230, 137, 57, 113, 209, 124, 249, 234, 101, 182, 27, 28, 134, 58, 228, 24, 57, 38, 216, 57, 3, 169, 27, 23, 193, 80, 148, 67, 27, 91},
	{180, 11, 154, 27, 223, 3, 114, 205, 159, 87, 104, 169, 228, 49, 81, 17, 87, 209, 249, 203, 95, 144, 94, 129, 250, 61, 130, 189, 158, 184, 253, 186},
	{114, 172, 209, 255, 242, 83, 123, 132, 24, 69, 74, 221, 34, 220, 15, 138, 179, 191, 203, 138, 243, 6, 58, 125, 229, 22, 153, 116, 230, 250, 17, 111},
	{57, 35, 169, 118, 13, 206, 66, 30, 186, 127, 163, 202, 20, 124, 157, 63, 205, 2, 15, 86, 128, 150, 53, 232, 63, 233, 230, 102, 246, 160, 127, 10},
	{4, 215, 42, 120, 156, 210, 10, 9, 115, 142, 135, 114, 95, 85, 66, 247, 40, 181, 151, 119, 250, 92, 179, 202, 106, 106, 129, 222, 12, 169, 68, 198},
	{44, 224, 26, 174, 23, 227, 244, 101, 238, 150, 122, 31, 161, 163, 71, 171, 36, 224, 109, 101, 174, 166, 203, 157, 30, 234, 227, 38, 223, 123, 85, 140},
	{197, 85, 17, 202, 28, 183, 159, 142, 242, 250, 241, 177, 39, 44, 165, 176, 190, 189, 127, 112, 107, 117, 183, 112, 76, 226, 7, 3, 96, 115, 98, 97},
	{45, 87, 180, 91, 68, 178, 73, 171, 86, 153, 191, 8, 155, 43, 210, 100, 7, 62, 190, 75, 205, 4, 216, 136, 58, 108, 251, 186, 113, 229, 169, 18},
	{195, 74, 42, 95, 53, 86, 125, 111, 208, 34, 238, 200, 233, 175, 117, 210, 75, 80, 138, 108, 241, 238, 85, 92, 85, 84, 237, 130, 121, 130, 244, 191},
	{109, 71, 44, 202, 210, 29, 237, 165, 86, 232, 5, 135, 36, 23, 118, 223, 159, 93, 29, 69, 203, 77, 154, 203, 238, 126, 253, 184, 133, 229, 29, 163},
	{54, 108, 215, 49, 61, 37, 190, 211, 96, 81, 244, 236, 140, 185, 29, 162, 175, 83, 57, 50, 39, 116, 13, 88, 74, 97, 198, 221, 19, 185, 251, 56},
	{138, 15, 189, 162, 167, 31, 91, 187, 102, 118, 24, 252, 86, 243, 226, 57, 248, 46, 35, 68, 81, 220, 25, 248, 134, 62, 73, 226, 119, 227, 51, 208},
	{230, 225, 176, 6, 111, 229, 203, 21, 105, 102, 3, 162, 71, 247, 141, 97, 95, 45, 89, 185, 12, 172, 18, 116, 253, 136, 244, 10, 139, 153, 113, 88},
	{12, 222, 143, 232, 172, 195, 169, 74, 163, 138, 115, 228, 39, 59, 155, 51, 211, 32, 156, 98, 66, 107, 48, 195, 157, 188, 21, 120, 50, 227, 187, 149},
	{251, 74, 119, 179, 26, 84, 99, 170, 222, 213, 134, 228, 64, 161, 167, 122, 248, 144, 151, 132, 171, 215, 117, 237, 139, 52, 146, 112, 166, 134, 71, 255},
	{168, 25, 228, 34, 60, 113, 76, 253, 187, 107, 94, 168, 66, 58, 250, 75, 199, 196, 246, 117, 183, 89, 33, 51, 220, 245, 159, 94, 102, 99, 159, 94},
	{251, 75, 132, 107, 236, 38, 143, 74, 205, 156, 251, 226, 196, 75, 188, 144, 84, 195, 192, 48, 155, 242, 131, 247, 36, 18, 129, 138, 168, 87, 255, 117},
	{240, 109, 96, 212, 92, 234, 140, 161, 135, 221, 213, 54, 31, 152, 179, 69, 116, 145, 254, 153, 181, 18, 161, 166, 21, 255, 164, 99, 230, 61, 189, 239},
	{63, 24, 72, 8, 199, 170, 175, 245, 93, 124, 138, 195, 231, 90, 199, 93, 68, 69, 0, 142, 203, 186, 182, 7, 245, 178, 6, 53, 48, 135, 184, 69},
	{73, 188, 134, 252, 120, 234, 175, 216, 187, 66, 151, 25, 167, 14, 167, 215, 87, 80, 97, 237, 46, 147, 7, 13, 174, 177, 191, 54, 245, 193, 233, 74},
	{223, 7, 173, 42, 38, 1, 106, 149, 189, 163, 225, 253, 153, 179, 55, 14, 203, 207, 21, 164, 247, 51, 228, 24, 113, 64, 173, 13, 160, 219, 63, 12},
	{150, 216, 51, 120, 145, 162, 244, 106, 111, 171, 62, 197, 172, 12, 235, 68, 236, 59, 74, 232, 149, 238, 134, 114, 119, 176, 167, 239, 82, 126, 173, 52},
	{218, 21, 145, 57, 230, 68, 160, 239, 30, 41, 196, 154, 213, 55, 190, 143, 3, 153, 175, 126, 194, 210, 213, 25, 52, 95, 231, 9, 103, 116, 214, 98},
	{199, 100, 38, 246, 27, 92, 28, 69, 38, 94, 91, 72, 120, 134, 111, 167, 38, 160, 241, 120, 0, 162, 68, 225, 173, 2, 144, 188, 76, 246, 50, 217},
	{116, 179, 210, 12, 200, 60, 90, 208, 243, 204, 154, 216, 27, 139, 61, 104, 51, 154, 136, 253, 233, 58, 65, 104, 160, 222, 102, 71, 28, 25, 217, 173},
	{168, 99, 134, 55, 33, 14, 115, 185, 205, 60, 87, 223, 178, 154, 53, 205, 39, 108, 40, 188, 137, 223, 207, 97, 106, 235, 181, 236, 178, 252, 108, 104},
	{219, 24, 240, 246, 56, 49, 124, 78, 117, 35, 64, 158, 100, 104, 3, 185, 63, 162, 61, 112, 245, 106, 150, 145, 2, 158, 12, 122, 22, 179, 91, 40},
	{166, 46, 107, 6, 25, 7, 153, 177, 233, 45, 133, 102, 145, 47, 152, 225, 42, 151, 16, 65, 23, 89, 219, 97, 137, 150, 105, 243, 183, 246, 172, 64},
	{13, 151, 143, 182, 151, 220, 248, 178, 67, 199, 151, 139, 181, 121, 174, 103, 248, 112, 108, 193, 240, 136, 181, 23, 242, 223, 229, 157, 192, 58, 138, 158},
	{244, 33, 207, 244, 143, 20, 243, 230, 189, 174, 139, 173, 67, 97, 167, 95, 172, 70, 145, 226, 75, 99, 212, 143, 186, 250, 112, 41, 1, 253, 77, 224},
	{161, 240, 237, 168, 197, 6, 32, 179, 169, 76, 139, 112, 244, 59, 1, 14, 218, 193, 106, 114, 46, 148, 62, 34, 109, 209, 185, 152, 64, 1, 45, 159},
	{172, 252, 74, 241, 254, 176, 8, 135, 251, 23, 79, 9, 229, 91, 174, 163, 239, 24, 217, 42, 206, 193, 203, 84, 108, 119, 182, 126, 241, 224, 148, 159},
	{178, 36, 249, 21, 187, 108, 39, 72, 255, 87, 17, 204, 86, 16, 18, 72, 61, 5, 93, 47, 169, 185, 234, 160, 14, 180, 118, 90, 161, 160, 17, 201},
	{64, 17, 47, 9, 83, 92, 20, 214, 209, 1, 250, 69, 137, 22, 234, 205, 110, 172, 35, 235, 89, 17, 103, 128, 78, 39, 30, 254, 202, 82, 103, 141},
	{93, 153, 253, 174, 194, 214, 186, 38, 99, 235, 202, 206, 12, 129, 234, 123, 71, 228, 35, 205, 31, 125, 134, 78, 159, 73, 114, 40, 12, 130, 44, 64},
	{124, 89, 125, 211, 214, 197, 67, 120, 8, 187, 181, 84, 65, 3, 125, 24, 28, 32, 13, 96, 171, 246, 54, 144, 0, 55, 171, 3, 104, 166, 35, 131},
}

var precannedKMACs = [][][]byte{
	{{63, 205, 167, 131, 157, 220, 236, 150, 197, 253, 99, 27, 116, 128, 167, 53, 95, 180, 16, 77, 17, 151, 56, 21, 73, 84, 168, 253, 129, 73, 189, 65}, {71, 165, 176, 53, 179, 66, 116, 4, 190, 196, 232, 83, 181, 145, 140, 86, 73, 1, 19, 109, 52, 55, 113, 110, 44, 66, 222, 16, 107, 92, 21, 192}, {41, 136, 121, 185, 187, 109, 114, 36, 165, 130, 39, 36, 22, 96, 55, 173, 218, 164, 67, 59, 116, 60, 152, 14, 9, 34, 74, 212, 136, 22, 231, 126}},
	{{43, 29, 131, 82, 184, 181, 207, 209, 236, 67, 116, 42, 75, 184, 89, 118, 91, 105, 36, 113, 183, 228, 69, 122, 27, 189, 241, 25, 85, 186, 231, 180}, {46, 38, 73, 236, 213, 7, 153, 16, 102, 168, 162, 212, 27, 116, 42, 91, 210, 49, 152, 205, 216, 203, 161, 12, 13, 221, 50, 186, 169, 224, 219, 206}, {159, 128, 87, 161, 156, 200, 112, 154, 13, 45, 34, 0, 206, 173, 145, 234, 245, 15, 248, 224, 154, 193, 198, 242, 46, 174, 165, 166, 238, 203, 219, 55}},
	{{99, 98, 41, 110, 174, 19, 107, 214, 248, 64, 180, 182, 163, 207, 76, 65, 80, 233, 198, 18, 40, 74, 34, 140, 51, 106, 157, 137, 65, 139, 135, 105}, {194, 92, 182, 23, 54, 241, 197, 102, 171, 143, 131, 119, 156, 227, 66, 20, 34, 132, 70, 42, 56, 89, 51, 170, 128, 175, 22, 61, 102, 141, 4, 9}, {205, 75, 175, 99, 251, 5, 199, 4, 246, 39, 224, 227, 134, 84, 128, 167, 163, 241, 157, 200, 60, 34, 61, 140, 96, 229, 141, 81, 214, 21, 121, 202}},
	{{171, 213, 234, 164, 31, 144, 131, 188, 72, 174, 184, 162, 121, 39, 127, 124, 110, 9, 201, 124, 196, 181, 49, 10, 114, 221, 24, 143, 180, 170, 253, 213}, {21, 59, 116, 224, 181, 165, 61, 37, 82, 14, 231, 131, 206, 202, 142, 132, 160, 174, 81, 122, 244, 64, 200, 104, 52, 8, 238, 167, 141, 17, 40, 64}, {120, 40, 183, 49, 155, 49, 125, 218, 145, 138, 17, 224, 135, 170, 115, 140, 21, 208, 30, 96, 242, 162, 229, 129, 180, 83, 176, 13, 143, 200, 77, 225}},
	{{129, 110, 208, 255, 12, 81, 101, 244, 92, 9, 48, 172, 57, 104, 57, 74, 18, 188, 201, 138, 237, 84, 199, 112, 89, 210, 24, 204, 119, 28, 70, 4}, {90, 192, 108, 212, 48, 142, 153, 42, 140, 195, 246, 75, 21, 174, 92, 116, 44, 202, 0, 8, 235, 18, 191, 78, 204, 153, 246, 7, 62, 29, 160, 60}, {228, 128, 242, 36, 91, 114, 81, 117, 250, 188, 64, 189, 130, 14, 28, 87, 136, 9, 245, 203, 112, 214, 247, 137, 212, 35, 173, 148, 38, 126, 210, 134}},
	{{217, 171, 71, 246, 77, 62, 96, 98, 255, 15, 105, 71, 180, 192, 154, 255, 72, 243, 66, 96, 10, 70, 41, 222, 151, 156, 181, 241, 175, 182, 188, 5}, {70, 229, 228, 240, 217, 130, 140, 146, 99, 86, 164, 229, 9, 111, 96, 181, 209, 189, 140, 242, 90, 92, 94, 100, 7, 18, 131, 14, 70, 190, 134, 98}, {2, 37, 209, 32, 141, 104, 186, 47, 191, 94, 35, 56, 92, 3, 135, 79, 208, 78, 172, 176, 32, 125, 222, 233, 102, 76, 172, 251, 248, 229, 229, 31}},
	{{209, 11, 208, 234, 150, 101, 131, 153, 152, 3, 251, 13, 102, 150, 102, 109, 209, 15, 190, 27, 39, 196, 81, 104, 86, 204, 96, 12, 19, 70, 67, 154}, {30, 188, 33, 143, 8, 101, 62, 9, 253, 14, 57, 160, 83, 138, 57, 13, 9, 137, 179, 76, 67, 148, 163, 46, 246, 16, 40, 125, 170, 89, 230, 223}, {134, 75, 117, 84, 120, 180, 11, 209, 161, 138, 173, 7, 199, 242, 32, 42, 144, 130, 241, 198, 44, 133, 137, 207, 1, 236, 250, 123, 160, 200, 134, 144}},
	{{197, 233, 40, 154, 103, 238, 131, 179, 161, 136, 171, 6, 165, 176, 147, 189, 97, 206, 39, 244, 133, 150, 68, 225, 37, 245, 198, 91, 194, 34, 170, 77}, {183, 205, 199, 23, 252, 154, 3, 168, 150, 219, 45, 131, 236, 215, 130, 71, 171, 220, 220, 164, 231, 225, 48, 84, 17, 225, 170, 146, 24, 235, 155, 136}, {147, 39, 209, 61, 50, 52, 117, 144, 216, 99, 161, 198, 184, 109, 20, 175, 188, 19, 117, 177, 91, 91, 239, 41, 204, 69, 172, 96, 24, 8, 7, 218}},
	{{38, 82, 170, 54, 236, 53, 66, 78, 129, 129, 251, 124, 134, 248, 170, 18, 12, 123, 79, 196, 112, 142, 172, 119, 215, 148, 18, 229, 255, 57, 26, 82}, {93, 217, 62, 41, 166, 68, 178, 223, 41, 67, 34, 60, 129, 179, 1, 97, 242, 231, 182, 175, 219, 185, 70, 212, 191, 39, 39, 247, 93, 121, 70, 41}, {75, 114, 247, 136, 224, 117, 113, 117, 104, 84, 120, 63, 235, 54, 122, 19, 162, 93, 24, 163, 179, 205, 225, 73, 180, 161, 141, 195, 33, 40, 84, 82}},
	{{146, 236, 108, 46, 115, 76, 35, 222, 16, 251, 203, 37, 108, 170, 122, 70, 204, 101, 99, 242, 36, 81, 131, 59, 243, 105, 206, 176, 190, 83, 20, 118}, {160, 133, 116, 85, 18, 230, 210, 138, 86, 111, 188, 158, 167, 57, 98, 245, 49, 45, 95, 92, 161, 169, 8, 231, 132, 194, 160, 16, 70, 42, 18, 104}, {71, 151, 196, 114, 78, 240, 53, 9, 195, 219, 186, 220, 208, 104, 93, 90, 206, 180, 116, 252, 45, 126, 76, 255, 55, 160, 165, 108, 222, 159, 147, 126}},
}

func grpTest() *cyclic.Group {
	primeString := "FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD1" +
		"29024E088A67CC74020BBEA63B139B22514A08798E3404DD" +
		"EF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245" +
		"E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7ED" +
		"EE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3D" +
		"C2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F" +
		"83655D23DCA3AD961C62F356208552BB9ED529077096966D" +
		"670C354E4ABC9804F1746C08CA18217C32905E462E36CE3B" +
		"E39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9" +
		"DE2BCBF6955817183995497CEA956AE515D2261898FA0510" +
		"15728E5A8AACAA68FFFFFFFFFFFFFFFF"

	p := large.NewIntFromString(primeString, 16)
	g := large.NewInt(2)
	return cyclic.NewGroup(p, g)
}
